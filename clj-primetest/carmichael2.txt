help.append("Prime test is a small application to test for the ");
help.append("primality of a number or the closest prime to an ");
help.append("upper bound.\n\n");
help.append("Usage PrimeTest <method> [-f] <number type> <number> [<-w> <number>]\n\n");
<dl>Method Options \n");
help.append("  -b \n");
help.append("         Brute Force check if a number is prime\n");
help.append("  -mr \n");
help.append("         Miller-Rabin primality test.  Must also specify -w flag and number\n");
help.append("  -mrd \n");
help.append("         Miller-Rabin Deteriministic primality test.\n");
help.append("  -fp \n");
help.append("         Fermat primality test. Checks against Carmichael numbers. Must also specify -w flag and number\n");
help.append("  -ss \n");
help.append("         Solovay-Strassen primality test. Must also specify -w flag and number\n");
help.append("  -h \n");
help.append("         output this help message\n\n");
</dl>
help.append("  Number Type Options \n");
help.append("  -n <number>\n");
help.append("         Use the <number> specified.\n\n");
help.append("  -g <number>\n");
help.append("         Generate a number of <number> digits\n\n");
help.append("  Witnesses Option \n");
help.append("  -w <number>\n");
help.append("         Use <number> witnesses in the Miller-Rabin, Fermat, or Solovay-Strassen tests.\n\n");
help.append("  Other Options \n");
help.append("  -v \n");
help.append("         Show verbose output.\n\n");
help.append("  -f \n");
help.append("         Find the closest prime less than or equal to the specified or generated number.\n\n");
help.append("Examples:\n\n");
help.append("  java -jar PrimeTest.jar -b -n 19827362\n");
help.append("     will brute force check the primality of 19827362\n\n");
help.append("  java -jar PrimeTest.jar -mr -g 20 -w 30\n");
help.append("     will use Miller-Rabin to check a random number of 20 digits\n ");
help.append("     using 30 witnesses.\n\n");
help.append("  java -jar PrimeTest.jar -mr -f -g 20 -w 30\n");
help.append("     will use Miller-Rabin to check a random number of 20 digits\n");
help.append("     using 30 witnesses. If a the generated number is not prime then\n");
help.append("     it will proceed to find the largest prime smaller than the generated.\n");
help.append("     number.\n\n");